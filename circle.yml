version: 2
jobs:
  build:
    docker:
      # Recursive self-reference...
      - image: hbpmip/docker-compose-for-ci:17.06-1
    environment:
      - CIRCLECI: true
    steps:
      - setup_remote_docker:
          version: 17.06.0-ce
      - checkout
      - run: echo "A First hello"
      - run:
          name: "Install requirements"
          command: |
            docker --version
#      - run:
#          name: "Build the project"
#          command: |
#            docker build -t hbpmip/portal-frontend .
  test:
    docker:
      - image: hbpmip/docker-compose-for-ci:17.06-1
      - image: circleci/openjdk:8-jdk-browsers
    environment:
          - CIRCLECI: true
    steps:
      - setup_remote_docker:
          version: 17.06.0-ce
      - checkout
      - run:
          name: "Install requirements"
          command: |
            docker --version
      - run:
          name: "Pull & install backend"
          command: |
            git clone https://github.com/LREN-CHUV/web-analytics-starter.git
            cd web-analytics-starter
            docker --version

            set -e

            get_script_dir () {
                 SOURCE="${BASH_SOURCE[0]}"

                 while [ -h "$SOURCE" ]; do
                      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
                      SOURCE="$( readlink "$SOURCE" )"
                      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
                 done
                 cd -P "$( dirname "$SOURCE" )"
                 pwd
            }

            cd "$(get_script_dir)"

            if pgrep -lf sshuttle > /dev/null ; then
              echo "sshuttle detected. Please close this program as it messes with networking and prevents Docker links to work"
              exit 1
            fi

            if [ $NO_SUDO ]; then
              DOCKER="docker"
              DOCKER_COMPOSE="docker-compose"
            elif groups "$USER" | grep &>/dev/null '\bdocker\b'; then
              DOCKER="docker"
              DOCKER_COMPOSE="docker-compose"
            else
              DOCKER="sudo docker"
              DOCKER_COMPOSE="sudo docker-compose"
            fi

            for param in "$@"
            do
              if [ "--no-frontend" == "$param" ]; then
                no_frontend=0
                echo "INFO: --no-frontend option detected !"
                break;
              fi
            done

            echo "Remove old running containers (if any)..."
            docker-compose kill
            docker-compose rm -f

            echo "Deploy a Postgres server and wait for it to be ready..."
            docker-compose up -d db zookeeper
            docker-compose run wait_zookeeper
            docker-compose up -d mesos_master
            docker-compose run wait_mesos_master
            docker-compose up -d mesos_slave
            docker-compose run wait_dbs

            echo "Create databases..."
            docker-compose run create_dbs

            echo "Migrate woken database..."
            docker-compose run woken_db_setup

            echo "Migrate metadata database..."
            docker-compose run sample_meta_db_setup

            echo "Migrate features database..."
            docker-compose run sample_data_db_setup

            echo "Run containers..."
            for i in 1 2 3 4 5 ; do
              docker-compose up -d chronos
              docker-compose run wait_chronos
              docker-compose logs chronos | grep java.util.concurrent.TimeoutException || break
              echo "Chronos failed to start, restarting..."
              docker-compose stop chronos
            done

            docker-compose up -d woken wokenvalidation

            docker-compose run wait_woken

            for i in 1 2 3 4 5 ; do
              docker-compose logs chronos | grep java.util.concurrent.TimeoutException || break
              echo "Chronos failed to start, restarting..."
              docker-compose stop chronos
              docker-compose up -d chronos
              docker-compose run wait_chronos
            done

            docker-compose up -d portalbackend
            docker-compose run wait_portal_backend
            docker-compose up -d frontend

            echo "DONE"

            cd ..



#      - run:
#          name: "Build the backend"
#          command: |
#            git clone https://github.com/LREN-CHUV/web-analytics-starter.git
#            cd web-analytics-starter
#            ./run.sh
#          environment:
#            NO_SUDO: "true"

#      - run:
#          name: "Build the project"
#          command: |
#            docker build -t hbpmip/portal-frontend-dev -f ./Dockerfile-e2e-tests .
#      - run:
#          name: "Run the project"
#          command: |
#            docker run -it --rm --net=host -p8000:8000 hbpmip/portal-frontend-dev


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test
